"""
Django settings for djangoProject project.

Generated by 'django-admin startproject' using Django 3.2.12.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w#s&_sk1(%^uj9x$0_ybysl+mnr9334n49dxz6hr2_40vug(sb'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.account',
    'apps.storage',
    'apps.search',
    'apps.task',
    'apps.fl',
    'corsheaders',
    'gunicorn'
]


STATIC_URL = "/static/"
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
    os.path.join(BASE_DIR, "apps/fl/FL_for_matdata/results"),
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'djangoProject.utils.middleware.FabricExceptionMiddleware',
    'djangoProject.utils.middleware.TokenLoginMiddleware',
    'djangoProject.utils.middleware.GlobalRequestMiddleware'
]
# CORS
CORS_ORIGIN_WHITELIST = (
    'http://127.0.0.1:8080',
    'http://127.0.0.1:9000',
    'http://localhost:8080',
    'http://localhost:9000',
    'http://localhost:9001',
    'http://127.0.0.1:9001',
    'http://localhost:8000',
    'http://127.0.0.1:9000',
    'http://127.0.0.1:18080',
    'http://127.0.0.1:18000',
    'http://127.0.0.1:9001',
    'http://localhost:18080',
    'http://localhost:18000',
    'http://localhost:9001',
    'http://localhost:8090',
)

CORS_ALLOW_CREDENTIALS = True  # 指明在跨域访问中，后端是否支持对cookie的操作。
ROOT_URLCONF = 'djangoProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djangoProject.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

from mongoengine import connect

connect('MGE', host='localhost:27017', alias='default')  # connect mongo

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

# AUTH_USER_MODEL = 'account.User'

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False if DEBUG else True,  # 是否禁用已经存在的日志器
#     'formatters': {  # 日志信息显示的格式
#         'verbose': {
#             'format': '%(levelname)s %(asctime)s %(module)s %(lineno)s %(message)s'
#             # "class": "pythonjsonlogger.jsonlogger.JsonFormatter"
#         },
#         'simple': {
#             'format': '%(levelname)s %(asctime)s %(module)s %(funcName)s %(lineno)d %(message)s'
#             # "class": "pythonjsonlogger.jsonlogger.JsonFormatter"
#         },  # 日志记录级别+时间日期+模块名称+函数名称+行号+记录消息
#     },
#     'filters': {  # 对日志进行过滤
#         'require_debug_true': {  # django在debug模式下才输出日志
#             '()': 'django.utils.loggger.py.RequireDebugTrue',
#         },
#     },
#     'handlers': {  # 日志处理方法
#         'console': {  # 向终端中输出日志
#             'level': 'DEBUG' if DEBUG else 'INFO',
#             'filters': ['require_debug_true'],  # debug为true才会输出
#             'class': 'logging.StreamHandler',
#             'formatter': 'verbose'
#         },
#         'info': {  # 向文件中输出日志
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',
#             'filename': '/home/drs/codes/logs/django-info.loggger.py',  # 日志文件的位置
#             'maxBytes': 300 * 1024 * 1024,  # 300M大小
#             'backupCount': 10,
#             'formatter': 'verbose',
#             'encoding': 'utf-8'
#         },
#         'demo': {  # 专门定义一个收集特定信息的日志
#             'level': 'INFO',
#             'class': 'logging.handlers.RotatingFileHandler',  # 保存到文件，自动切
#             'filename': '/home/drs/codes/logs/django-info.loggger.py',
#             'maxBytes': 1024 * 1024 * 50,  # 日志大小 50M
#             'backupCount': 5,
#             'formatter': 'verbose',
#             'encoding': "utf-8"
#         },
#
#     },
#     'loggers': {  # 日志器
#         "django": {  # 默认的logger应用如下配置
#             "handlers": ["info", "console"],
#             "propagate": True,
#             "level": "INFO"
#         },
#         'demo_log': {  # 名为 'demo'的logger还单独处理
#             'handlers': ['demo'],
#             "propagate": True,
#             'level': 'INFO',
#         },
#     }
# }
